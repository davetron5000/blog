<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on Mike Perham</title>
    <link>https://www.mikeperham.com/categories/rails/</link>
    <description>Recent content in Rails on Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.mikeperham.com/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting MySQL DATETIME column defaults in Rails</title>
      <link>https://www.mikeperham.com/2014/05/17/setting-mysql-datetime-column-defaults-in-rails/</link>
      <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2014/05/17/setting-mysql-datetime-column-defaults-in-rails/</guid>
      <description>Starting in MySQL 5.6.5, datetime columns can have an actual useful default of CURRENT_TIMESTAMP and MySQL will auto-populate the columns as necessary. This is incredibly handy if you ever do bulk updates in SQL, now you don&amp;rsquo;t need to remember to set updated_at! Inserting records manually will auto-populate those columns too. Let&amp;rsquo;s try it:
def up create_table :rows do |t| t.integer :value t.datetime :created_at, null: false, default: &#34;CURRENT_TIMESTAMP&#34; t.datetime :updated_at, null: false, default: &#34;</description>
    </item>
    
    <item>
      <title>Don&#39;t Forget What&#39;s Important</title>
      <link>https://www.mikeperham.com/2014/01/18/dont-forget-whats-important/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2014/01/18/dont-forget-whats-important/</guid>
      <description>&lt;p&gt;Technologies come and go. We learn and grow as engineers over time but some things are eternal: knowing what is truly important to you is critical in differentiating between a path to misery versus fulfillment. Like your coworkers and your environment, the technology you work with day to day can make a big difference in your job satisfaction.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Please Use an Error Service!</title>
      <link>https://www.mikeperham.com/2013/08/25/please-use-an-error-service/</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2013/08/25/please-use-an-error-service/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://www.mikeperham.com/2012/03/03/the-perils-of-rescue-exception/&#34;&gt;The Perils of &amp;ldquo;rescue Exception&amp;rdquo;&lt;/a&gt; I explained one major error handling issue I see in almost all Ruby code. The second mistake I see is using logging rather than an error service.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Board Games and Beverages at Railsconf 2013</title>
      <link>https://www.mikeperham.com/2013/04/17/board-games-and-beverages-at-railsconf-2013/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2013/04/17/board-games-and-beverages-at-railsconf-2013/</guid>
      <description>You are invited to a whimsical evening of merriment and gamesmanship!
What: Board Games and Beverages
Where: Skyroom Lounge, top of Red Lion Hotel, across the street from Railsconf
When: Tuesday, 4/30 7-11pm
The Skyroom has a great view of Portland so try to get there before sundown. We should have enough games for everyone but bring your favorite if you&amp;rsquo;d like. They have food if you need a late dinner.</description>
    </item>
    
    <item>
      <title>Railsconf 2013 events</title>
      <link>https://www.mikeperham.com/2013/04/11/railsconf-2013-events/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2013/04/11/railsconf-2013-events/</guid>
      <description>Want to know what&amp;rsquo;s going on during Railsconf 2013 outside of the conference center? Here&amp;rsquo;s a list of all events open to the public, this page will be updated as I learn of more events. Email mperham at gmail with event details.
Sunday 4/28
KidsCodeCamp, 10am-4pm, Multnomah Arts Center
PlanetArgon.com Gorge Hike, 12:30-6:30pm, meet at Convention Center
Monday 4/29
Tech Women&amp;rsquo;s Communities Social, 7-9pm, NewRelic HQ
Code Fellows Happy Hour, 7:30-9:30pm, Rontoms</description>
    </item>
    
    <item>
      <title>12 Gems of Christmas #2 -- bullet</title>
      <link>https://www.mikeperham.com/2012/12/11/12-gems-of-christmas-2-bullet/</link>
      <pubDate>Tue, 11 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2012/12/11/12-gems-of-christmas-2-bullet/</guid>
      <description>ActiveRecord has been a huge boon for web development in promoting conventions in databases. Every new company I joined we had to determine how to name tables, primary keys and indexes. Standardizing id, automatic timestamps, pluralizing nouns, all of it makes development easier and more friendly to developers who just want to build stuff, not worry about every mundane detail.
All is not wine and roses though, ActiveRecord suffers from a common ORM performance issue: the N+1 query problem.</description>
    </item>
    
    <item>
      <title>12 Gems of Christmas #5 -- lograge</title>
      <link>https://www.mikeperham.com/2012/12/08/12-gems-of-christmas-5-lograge/</link>
      <pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2012/12/08/12-gems-of-christmas-5-lograge/</guid>
      <description>Rails has a problem: its production logging is somewhat lacking. By default, Rails will emit a bunch of lines for each request, which makes grepping the output tougher than it should be. Look at this, it&amp;rsquo;s nice to look at but painful to aggregate:
Started GET &#34;/&#34; for 127.0.0.1 at 2012-03-10 14:28:14 +0100 Processing by HomeController#index as HTML Rendered text template within layouts/application (0.0ms) Rendered layouts/_assets.html.erb (2.0ms) Rendered layouts/_top.html.erb (2.6ms) Rendered layouts/_about.</description>
    </item>
    
    <item>
      <title>12 Gems of Christmas #9 -- pundit</title>
      <link>https://www.mikeperham.com/2012/12/04/12-gems-of-christmas-9-pundit/</link>
      <pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2012/12/04/12-gems-of-christmas-9-pundit/</guid>
      <description>When it comes to authorization, Ryan Bates&amp;rsquo; CanCan gem is the 800 lb gorilla that most Rails apps use. pundit is the latest gem from Jonas Nicklas (author of Carrierwave and Capybara) with some interesting ideas that you might like. Pundit uses code conventions along with a plain old Ruby API to make for a very simple implementation. First, write a policy for each type of model you wish to authorize:</description>
    </item>
    
    <item>
      <title>12 Gems of Christmas #10 -- konacha</title>
      <link>https://www.mikeperham.com/2012/12/03/12-gems-of-christmas-10-konacha/</link>
      <pubDate>Mon, 03 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2012/12/03/12-gems-of-christmas-10-konacha/</guid>
      <description>It&amp;rsquo;s got a crazy name but solves a serious problem that continues to vex the Rails community: javascript testing. There are a number of libraries out there that try to solve the problem but konacha is the first I&amp;rsquo;m aware of that integrates tightly with Rails 3 and Sprockets to make JavaScript testing as easy as possible within your Rails app. For instance, you might have spec/javascripts/array_sum_spec.js:
//= require array_sum describe(&#34;</description>
    </item>
    
    <item>
      <title>Using Statsd with Rails</title>
      <link>https://www.mikeperham.com/2012/08/25/using-statsd-with-rails/</link>
      <pubDate>Sat, 25 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.mikeperham.com/2012/08/25/using-statsd-with-rails/</guid>
      <description>One of the things I&amp;rsquo;ve had on my mind at The Clymb is better runtime monitoring for our website and servers. We have NewRelic but I always want more. With this in mind, I decided to try out statsd to collect and aggregate metrics for visualization. By using statsd, you get two benefits: 1) metric aggregation so you don&amp;rsquo;t have to pay for N machines reporting metrics to a pay service and 2) control over where your metrics go so you can route them to Graphite, Librato Metrics or any other standard metrics service.</description>
    </item>
    
  </channel>
</rss>
