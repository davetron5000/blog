<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com/</link>
    <description>Recent content on Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jul 2021 09:29:54 -0700</lastBuildDate>
    
	<atom:link href="https://www.mikeperham.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>On Multi-Platform Docker images</title>
      <link>https://www.mikeperham.com/2021/07/15/on-multi-platform-docker-images/</link>
      <pubDate>Thu, 15 Jul 2021 09:29:54 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/07/15/on-multi-platform-docker-images/</guid>
      <description>Until recently, Faktory only supported the x86_64 platform. With the rise of the Apple Silicon chip and AWS Graviton, it was obvious that I would need to roll out ARM64 support soon. This week I spent several days fighting Docker&amp;rsquo;s support for multi-platform images and wanted to document what I learned.
Faktory OSS The Faktory OSS build was relatively straightforward, with three steps for each platform:
 Build the ./faktory binary on the host.</description>
    </item>
    
    <item>
      <title>Using Tags with Sidekiq Jobs</title>
      <link>https://www.mikeperham.com/2021/06/23/using-tags-with-sidekiq-jobs/</link>
      <pubDate>Wed, 23 Jun 2021 15:08:02 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/06/23/using-tags-with-sidekiq-jobs/</guid>
      <description>A customer recently opened issue to point out a bug in Sidekiq&amp;rsquo;s tag filtering support and I realized: I haven&amp;rsquo;t told people that tags exist. Oops. Here is your notification. üòÅ
Sidekiq 6.0.1 added support for per-job tags. Tags are an Array of Strings within the job payload. Maybe you want to tag the sports related to a given job:
class SomeWorker include Sidekiq::Worker sidekiq_options tags: [&amp;#39;alpha&amp;#39;] There&amp;rsquo;s plenty of ideas for job tagging:</description>
    </item>
    
    <item>
      <title>A Tour of the Sidekiq API</title>
      <link>https://www.mikeperham.com/2021/04/20/a-tour-of-the-sidekiq-api/</link>
      <pubDate>Tue, 20 Apr 2021 09:00:00 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/04/20/a-tour-of-the-sidekiq-api/</guid>
      <description>Sidekiq provides an underappreciated but powerful tool for all users: the Sidekiq API. The API gives comprehensive and idiomatic access to Sidekiq&amp;rsquo;s underlying real-time job and queue data within Redis.
The Glossary To explore the API, first it helps to understand the basic entities in Sidekiq&amp;rsquo;s universe:
 A job is a unit of work in your Ruby application A queue is a list of jobs which are ready to execute right now A process is a Sidekiq process with one or more threads for executing jobs.</description>
    </item>
    
    <item>
      <title>Faktory News: Pause, RSS and Bring your own Redis</title>
      <link>https://www.mikeperham.com/2021/03/01/faktory-news-pause-rss-and-bring-your-own-redis/</link>
      <pubDate>Mon, 01 Mar 2021 09:00:00 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2021/03/01/faktory-news-pause-rss-and-bring-your-own-redis/</guid>
      <description>Faktory is my background job server for use with any programming language. It brings the nice patterns and features available in Sidekiq to the rest of the world. Using Go, Python, JavaScript, Elixir, or other languages? Give Faktory a shot!
Today I&amp;rsquo;ve released Faktory, Faktory Pro and Faktory Enterprise 1.5.0. What&amp;rsquo;s new?
Pause / Resume The OSS version of Faktory now allows you to Pause and Resume processing for a queue.</description>
    </item>
    
    <item>
      <title>Grouping Events for Later Processing</title>
      <link>https://www.mikeperham.com/2020/12/14/grouping-events-for-later-processing/</link>
      <pubDate>Mon, 14 Dec 2020 10:03:29 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2020/12/14/grouping-events-for-later-processing/</guid>
      <description>A customer recently wondered how they could handle aggregate events in Sidekiq. They don&amp;rsquo;t want one background job per event but rather a background job to handle the last N events.
Let&amp;rsquo;s pretend we work for an ecommerce vendor and we want to track product clicks: User A clicks on Product B. This is a naive way to show interest in a product or category; we want to store this data for long-term data mining purposes.</description>
    </item>
    
    <item>
      <title>Running Ruby on RISC-V</title>
      <link>https://www.mikeperham.com/2020/11/21/running-ruby-on-risc-v/</link>
      <pubDate>Sat, 21 Nov 2020 16:18:34 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2020/11/21/running-ruby-on-risc-v/</guid>
      <description>With the release of the new arm64 architecture M1 Macbooks, I started wondering about x86 alternatives and came across RISC-V. RISC-V is an open source ISA (the set of instructions documented by a CPU) which does not cost anything to use. Anyone can take the ISA, build a chip which implements the ISA and then any software compiled for RISC-V will run on that chip. Several generations of RISC ISAs were created at UC Berkeley in the 1980s; RISC-V denotes their fifth generation ISA.</description>
    </item>
    
    <item>
      <title>The Leaky Bucket rate limiter</title>
      <link>https://www.mikeperham.com/2020/11/09/the-leaky-bucket-rate-limiter/</link>
      <pubDate>Mon, 09 Nov 2020 08:33:40 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2020/11/09/the-leaky-bucket-rate-limiter/</guid>
      <description>A few months ago, a customer asked if I could supply a &amp;ldquo;leaky bucket&amp;rdquo; rate limiter as part of Sidekiq Enterprise&amp;rsquo;s rate limiter suite. It took me a while to find the time and energy to work on it (my need to mentally escape the 2020 election eventually did the trick).
  I went into this process knowing the basics of the leaky bucket algorithm but with no idea how to implement it.</description>
    </item>
    
    <item>
      <title>What&#39;s New in Sidekiq, 2020 edition</title>
      <link>https://www.mikeperham.com/2020/09/10/whats-new-in-sidekiq-2020-edition/</link>
      <pubDate>Thu, 10 Sep 2020 18:58:52 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2020/09/10/whats-new-in-sidekiq-2020-edition/</guid>
      <description>&amp;ldquo;Your work doesn&amp;rsquo;t matter if no one knows about it&amp;rdquo; &amp;ndash; some marketing genius
 COVID and wildfires have made this year hellish and really difficult to focus. I sympathize with all of my fellow engineers trying to maintain systems and improve apps while dealing with our rapidly changing society. Be kind to each other. ‚ù§Ô∏è
Let&amp;rsquo;s distract ourselves with a Sidekiq family update.
Sidekiq 6.1 The most visible change in Sidekiq 6.</description>
    </item>
    
    <item>
      <title>Trimming Dependencies: rack-protection</title>
      <link>https://www.mikeperham.com/2020/06/03/trimming-dependencies-rack-protection/</link>
      <pubDate>Wed, 03 Jun 2020 19:57:44 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2020/06/03/trimming-dependencies-rack-protection/</guid>
      <description>Recently I discussed how I was evaluating all of Sidekiq&amp;rsquo;s current dependencies to see if any could be removed or vendored to reduce upstream churn, security issues, and other maintenance chores. I was able to remove concurrent-ruby from Sidekiq Pro and Sidekiq Enterprise, which is a major win considering the size of that gem. A simple benchmark showed removing that gem shrunk a basic Sidekiq Pro process from 60MB to 50MB, a 16% improvement!</description>
    </item>
    
    <item>
      <title>Trimming Dependencies: concurrent-ruby</title>
      <link>https://www.mikeperham.com/2020/06/02/trimming-dependencies-concurrent-ruby/</link>
      <pubDate>Tue, 02 Jun 2020 15:41:10 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2020/06/02/trimming-dependencies-concurrent-ruby/</guid>
      <description>I&amp;rsquo;ve advocated for fewer dependencies for years now. Every long-running project needs to periodically re-evaluate their usage of each dependency and the value it provides. To that end, I recently considered Sidekiq&amp;rsquo;s dependencies:
 redis-rb - the Redis client connection_pool - provide threaded access to Redis connections rack - required to standardize Sidekiq&amp;rsquo;s Web UI rack-protection - necessary to provide CSRF protection for write actions in the Web UI  We might be able to remove rack-protection gem if we re-implement the CSRF functionality but none of the other gems are easy to remove (indeed, as I was writing this post, @seuros stepped up and took on issue #4587).</description>
    </item>
    
  </channel>
</rss>
