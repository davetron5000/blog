<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com/</link>
    <description>Recent content on Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Jul 2022 08:41:10 -0700</lastBuildDate>
    
	<atom:link href="https://www.mikeperham.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modernizing Einhorn</title>
      <link>https://www.mikeperham.com/2022/07/14/modernizing-einhorn/</link>
      <pubDate>Thu, 14 Jul 2022 08:41:10 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2022/07/14/modernizing-einhorn/</guid>
      <description>Einhorn is a Ruby gem which provides the ability to manage multiple forked processes of Unix services. Stripe originally built Einhorn to manage their internal collection of services in production but stopped actively maintaining the gem several years ago. I recently asked for and was granted ownership of the gem so that I could provide maintenance going forward. This blog post is meant to document how I took over and what I did, I hope others find this interesting and perhaps even useful.</description>
    </item>
    
    <item>
      <title>Coming Soon in Sidekiq, 2022 edition</title>
      <link>https://www.mikeperham.com/2022/06/17/coming-soon-in-sidekiq-2022-edition/</link>
      <pubDate>Fri, 17 Jun 2022 09:00:00 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2022/06/17/coming-soon-in-sidekiq-2022-edition/</guid>
      <description>I just released Sidekiq 6.5 and I&amp;rsquo;ve got a lot of changes on the roadmap for Sidekiq 7.0. Here&amp;rsquo;s what&amp;rsquo;s coming soon so you can plan too.
New Transaction-aware Client Sidekiq has long had a &amp;ldquo;problem&amp;rdquo; with executing jobs very fast, before any associated transaction has committed, leading to &amp;ldquo;Cannot find Model id=1234&amp;rdquo; errors. Sidekiq 6.5 introduced beta support for a new Sidekiq::Client option which will delay all job pushes until the current transaction has committed.</description>
    </item>
    
    <item>
      <title>üéâ Happy 10th Birthday, Sidekiq! üéÇ</title>
      <link>https://www.mikeperham.com/2022/01/17/happy-10th-birthday-sidekiq/</link>
      <pubDate>Mon, 17 Jan 2022 09:00:00 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2022/01/17/happy-10th-birthday-sidekiq/</guid>
      <description>It&amp;rsquo;s hard for me to believe these words but I pushed Sidekiq&amp;rsquo;s first commit on Jan 16th, 2012. Ten years ago. The public announcement. One month later. One quarter later.
Some context for those new to this blog: Sidekiq is the most popular background job system for the Ruby programming language. Every application has tasks which are important: send an email, charge a credit card, reserve inventory for an order, synchronize some data to a 3rd party service, etc.</description>
    </item>
    
    <item>
      <title>What&#39;s New in Sidekiq 6.3</title>
      <link>https://www.mikeperham.com/2021/11/07/whats-new-in-sidekiq-6.3/</link>
      <pubDate>Sun, 07 Nov 2021 09:00:00 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/11/07/whats-new-in-sidekiq-6.3/</guid>
      <description>I&amp;rsquo;m happy to announce the general availability of Sidekiq 6.3 here at Rubyconf 2021! Since Sidekiq 6.2 in March we&amp;rsquo;ve passed 110 million downloads on Rubygems.org and added a number of nice new features. Let&amp;rsquo;s dive in!
Sidekiq::Job One consistent issue in communication with the Sidekiq community is the nebulous term worker. Are you talking about a process? A thread? A type of job? Vagueness breeds confusion and frustration. I encourage developers to stop using the term worker and use include Sidekiq::Job in your job classes.</description>
    </item>
    
    <item>
      <title>On Multi-Platform Docker images</title>
      <link>https://www.mikeperham.com/2021/07/15/on-multi-platform-docker-images/</link>
      <pubDate>Thu, 15 Jul 2021 09:29:54 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/07/15/on-multi-platform-docker-images/</guid>
      <description>Until recently, Faktory only supported the x86_64 platform. With the rise of the Apple Silicon chip and AWS Graviton, it was obvious that I would need to roll out ARM64 support soon. This week I spent several days fighting Docker&amp;rsquo;s support for multi-platform images and wanted to document what I learned.
Faktory OSS The Faktory OSS build was relatively straightforward, with three steps for each platform:
Build the ./faktory binary on the host.</description>
    </item>
    
    <item>
      <title>Using Tags with Sidekiq Jobs</title>
      <link>https://www.mikeperham.com/2021/06/23/using-tags-with-sidekiq-jobs/</link>
      <pubDate>Wed, 23 Jun 2021 15:08:02 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/06/23/using-tags-with-sidekiq-jobs/</guid>
      <description>A customer recently opened issue to point out a bug in Sidekiq&amp;rsquo;s tag filtering support and I realized: I haven&amp;rsquo;t told people that tags exist. Oops. Here is your notification. üòÅ
Sidekiq 6.0.1 added support for per-job tags. Tags are an Array of Strings within the job payload. Maybe you want to tag the sports related to a given job:
class SomeWorker include Sidekiq::Worker sidekiq_options tags: [&amp;#39;alpha&amp;#39;] There&amp;rsquo;s plenty of ideas for job tagging:</description>
    </item>
    
    <item>
      <title>A Tour of the Sidekiq API</title>
      <link>https://www.mikeperham.com/2021/04/20/a-tour-of-the-sidekiq-api/</link>
      <pubDate>Tue, 20 Apr 2021 09:00:00 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2021/04/20/a-tour-of-the-sidekiq-api/</guid>
      <description>Sidekiq provides an underappreciated but powerful tool for all users: the Sidekiq API. The API gives comprehensive and idiomatic access to Sidekiq&amp;rsquo;s underlying real-time job and queue data within Redis.
The Glossary To explore the API, first it helps to understand the basic entities in Sidekiq&amp;rsquo;s universe:
A job is a unit of work in your Ruby application A queue is a list of jobs which are ready to execute right now A process is a Sidekiq process with one or more threads for executing jobs.</description>
    </item>
    
    <item>
      <title>Faktory News: Pause, RSS and Bring your own Redis</title>
      <link>https://www.mikeperham.com/2021/03/01/faktory-news-pause-rss-and-bring-your-own-redis/</link>
      <pubDate>Mon, 01 Mar 2021 09:00:00 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2021/03/01/faktory-news-pause-rss-and-bring-your-own-redis/</guid>
      <description>Faktory is my background job server for use with any programming language. It brings the nice patterns and features available in Sidekiq to the rest of the world. Using Go, Python, JavaScript, Elixir, or other languages? Give Faktory a shot!
Today I&amp;rsquo;ve released Faktory, Faktory Pro and Faktory Enterprise 1.5.0. What&amp;rsquo;s new?
Pause / Resume The OSS version of Faktory now allows you to Pause and Resume processing for a queue.</description>
    </item>
    
    <item>
      <title>Grouping Events for Later Processing</title>
      <link>https://www.mikeperham.com/2020/12/14/grouping-events-for-later-processing/</link>
      <pubDate>Mon, 14 Dec 2020 10:03:29 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2020/12/14/grouping-events-for-later-processing/</guid>
      <description>A customer recently wondered how they could handle aggregate events in Sidekiq. They don&amp;rsquo;t want one background job per event but rather a background job to handle the last N events.
Let&amp;rsquo;s pretend we work for an ecommerce vendor and we want to track product clicks: User A clicks on Product B. This is a naive way to show interest in a product or category; we want to store this data for long-term data mining purposes.</description>
    </item>
    
    <item>
      <title>Running Ruby on RISC-V</title>
      <link>https://www.mikeperham.com/2020/11/21/running-ruby-on-risc-v/</link>
      <pubDate>Sat, 21 Nov 2020 16:18:34 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2020/11/21/running-ruby-on-risc-v/</guid>
      <description>With the release of the new arm64 architecture M1 Macbooks, I started wondering about x86 alternatives and came across RISC-V. RISC-V is an open source ISA (the set of instructions documented by a CPU) which does not cost anything to use. Anyone can take the ISA, build a chip which implements the ISA and then any software compiled for RISC-V will run on that chip. Several generations of RISC ISAs were created at UC Berkeley in the 1980s; RISC-V denotes their fifth generation ISA.</description>
    </item>
    
  </channel>
</rss>
